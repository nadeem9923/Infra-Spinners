[0m[1mdata.google_compute_instance_group.this: Reading...[0m[0m
[0m[1mdata.google_service_account.this: Reading...[0m[0m
[0m[1mdata.google_compute_subnetwork.subnet: Reading...[0m[0m
[0m[1mdata.google_compute_network.network: Reading...[0m[0m
[0m[1mdata.google_compute_health_check.health_check: Reading...[0m[0m
[0m[1mdata.google_service_account.this: Read complete after 0s[0m
[0m[1mdata.google_compute_instance_group.this: Read complete after 0s[0m
[0m[1mdata.google_compute_health_check.health_check: Read complete after 0s[0m
[0m[1mdata.google_compute_subnetwork.subnet: Read complete after 0s [id=projects/playground-s-11-52cdad69/regions/us-central1/subnetworks/default][0m
[0m[1mdata.google_compute_network.network: Read complete after 0s [id=projects/playground-s-11-52cdad69/global/networks/default][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.google_compute_instance_template.generic[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "google_compute_instance_template" "generic" {
      [32m+[0m[0m advanced_machine_features    = (known after apply)
      [32m+[0m[0m can_ip_forward               = (known after apply)
      [32m+[0m[0m confidential_instance_config = (known after apply)
      [32m+[0m[0m description                  = (known after apply)
      [32m+[0m[0m disk                         = (known after apply)
      [32m+[0m[0m guest_accelerator            = (known after apply)
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m instance_description         = (known after apply)
      [32m+[0m[0m labels                       = (known after apply)
      [32m+[0m[0m machine_type                 = (known after apply)
      [32m+[0m[0m metadata                     = (known after apply)
      [32m+[0m[0m metadata_fingerprint         = (known after apply)
      [32m+[0m[0m metadata_startup_script      = (known after apply)
      [32m+[0m[0m min_cpu_platform             = (known after apply)
      [32m+[0m[0m most_recent                  = true
      [32m+[0m[0m name                         = "nginx-v1"
      [32m+[0m[0m name_prefix                  = (known after apply)
      [32m+[0m[0m network_interface            = (known after apply)
      [32m+[0m[0m project                      = "playground-s-11-52cdad69"
      [32m+[0m[0m region                       = (known after apply)
      [32m+[0m[0m reservation_affinity         = (known after apply)
      [32m+[0m[0m scheduling                   = (known after apply)
      [32m+[0m[0m self_link                    = (known after apply)
      [32m+[0m[0m service_account              = (known after apply)
      [32m+[0m[0m shielded_instance_config     = (known after apply)
      [32m+[0m[0m tags                         = (known after apply)
      [32m+[0m[0m tags_fingerprint             = (known after apply)
    }

[1m  # google_compute_autoscaler.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_autoscaler" "this" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "nginx-autoscaler"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m target             = (known after apply)
      [32m+[0m[0m zone               = "us-central1-c"

      [32m+[0m[0m autoscaling_policy {
          [32m+[0m[0m cooldown_period = 30
          [32m+[0m[0m max_replicas    = 8
          [32m+[0m[0m min_replicas    = 2
          [32m+[0m[0m mode            = "ON"

          [32m+[0m[0m cpu_utilization {
              [32m+[0m[0m predictive_method = "NONE"
              [32m+[0m[0m target            = 0.72
            }
        }
    }

[1m  # google_compute_backend_service.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_backend_service" "this" {
      [32m+[0m[0m connection_draining_timeout_sec = 300
      [32m+[0m[0m creation_timestamp              = (known after apply)
      [32m+[0m[0m fingerprint                     = (known after apply)
      [32m+[0m[0m generated_id                    = (known after apply)
      [32m+[0m[0m health_checks                   = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m load_balancing_scheme           = "EXTERNAL"
      [32m+[0m[0m name                            = "nginx"
      [32m+[0m[0m port_name                       = "http"
      [32m+[0m[0m project                         = (known after apply)
      [32m+[0m[0m protocol                        = "HTTP"
      [32m+[0m[0m self_link                       = (known after apply)
      [32m+[0m[0m session_affinity                = (known after apply)
      [32m+[0m[0m timeout_sec                     = 10

      [32m+[0m[0m backend {
          [32m+[0m[0m balancing_mode               = "RATE"
          [32m+[0m[0m capacity_scaler              = 1
          [32m+[0m[0m group                        = (known after apply)
          [32m+[0m[0m max_connections              = (known after apply)
          [32m+[0m[0m max_connections_per_endpoint = (known after apply)
          [32m+[0m[0m max_connections_per_instance = (known after apply)
          [32m+[0m[0m max_rate                     = (known after apply)
          [32m+[0m[0m max_rate_per_endpoint        = (known after apply)
          [32m+[0m[0m max_rate_per_instance        = 500
          [32m+[0m[0m max_utilization              = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m cdn_policy (known after apply)

      [32m+[0m[0m log_config (known after apply)
    }

[1m  # google_compute_firewall.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "this" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = (known after apply)
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "nginx-allow-healthcheck"
      [32m+[0m[0m network            = "default"
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "130.211.0.0/22",
          [32m+[0m[0m "35.191.0.0/16",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "nginx-app",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "80",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # google_compute_global_address.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_address" "this" {
      [32m+[0m[0m address            = (known after apply)
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "nginx-ipv4"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # google_compute_global_forwarding_rule.http[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_forwarding_rule" "http" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address            = (known after apply)
      [32m+[0m[0m ip_protocol           = (known after apply)
      [32m+[0m[0m label_fingerprint     = (known after apply)
      [32m+[0m[0m load_balancing_scheme = "EXTERNAL"
      [32m+[0m[0m name                  = "nginx-http"
      [32m+[0m[0m network               = (known after apply)
      [32m+[0m[0m port_range            = "80"
      [32m+[0m[0m project               = (known after apply)
      [32m+[0m[0m psc_connection_id     = (known after apply)
      [32m+[0m[0m psc_connection_status = (known after apply)
      [32m+[0m[0m self_link             = (known after apply)
      [32m+[0m[0m target                = (known after apply)
    }

[1m  # google_compute_global_forwarding_rule.https[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_forwarding_rule" "https" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address            = (known after apply)
      [32m+[0m[0m ip_protocol           = (known after apply)
      [32m+[0m[0m label_fingerprint     = (known after apply)
      [32m+[0m[0m load_balancing_scheme = "EXTERNAL"
      [32m+[0m[0m name                  = "nginx-https"
      [32m+[0m[0m network               = (known after apply)
      [32m+[0m[0m port_range            = "443"
      [32m+[0m[0m project               = (known after apply)
      [32m+[0m[0m psc_connection_id     = (known after apply)
      [32m+[0m[0m psc_connection_status = (known after apply)
      [32m+[0m[0m self_link             = (known after apply)
      [32m+[0m[0m target                = (known after apply)
    }

[1m  # google_compute_health_check.autohealing[0m will be created
[0m  [32m+[0m[0m resource "google_compute_health_check" "autohealing" {
      [32m+[0m[0m check_interval_sec  = 5
      [32m+[0m[0m creation_timestamp  = (known after apply)
      [32m+[0m[0m healthy_threshold   = 2
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "nginx-autohealing"
      [32m+[0m[0m project             = (known after apply)
      [32m+[0m[0m self_link           = (known after apply)
      [32m+[0m[0m timeout_sec         = 5
      [32m+[0m[0m type                = (known after apply)
      [32m+[0m[0m unhealthy_threshold = 10

      [32m+[0m[0m http_health_check {
          [32m+[0m[0m port         = 80
          [32m+[0m[0m proxy_header = "NONE"
          [32m+[0m[0m request_path = "/"
        }

      [32m+[0m[0m log_config (known after apply)
    }

[1m  # google_compute_http_health_check.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_http_health_check" "this" {
      [32m+[0m[0m check_interval_sec  = 1
      [32m+[0m[0m creation_timestamp  = (known after apply)
      [32m+[0m[0m healthy_threshold   = 2
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "nginx-healthcheck"
      [32m+[0m[0m port                = 80
      [32m+[0m[0m project             = (known after apply)
      [32m+[0m[0m request_path        = "/"
      [32m+[0m[0m self_link           = (known after apply)
      [32m+[0m[0m timeout_sec         = 1
      [32m+[0m[0m unhealthy_threshold = 2
    }

[1m  # google_compute_instance_group_manager.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_instance_group_manager" "this" {
      [32m+[0m[0m base_instance_name             = "nginx"
      [32m+[0m[0m creation_timestamp             = (known after apply)
      [32m+[0m[0m description                    = "Instance group for nginx-app server"
      [32m+[0m[0m fingerprint                    = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m instance_group                 = (known after apply)
      [32m+[0m[0m list_managed_instances_results = "PAGELESS"
      [32m+[0m[0m name                           = "nginx"
      [32m+[0m[0m operation                      = (known after apply)
      [32m+[0m[0m project                        = "playground-s-11-52cdad69"
      [32m+[0m[0m self_link                      = (known after apply)
      [32m+[0m[0m status                         = (known after apply)
      [32m+[0m[0m target_size                    = 2
      [32m+[0m[0m target_stopped_size            = (known after apply)
      [32m+[0m[0m target_suspended_size          = (known after apply)
      [32m+[0m[0m wait_for_instances             = false
      [32m+[0m[0m wait_for_instances_status      = "STABLE"
      [32m+[0m[0m zone                           = "us-central1-c"

      [32m+[0m[0m auto_healing_policies {
          [32m+[0m[0m health_check      = (known after apply)
          [32m+[0m[0m initial_delay_sec = 60
        }

      [32m+[0m[0m instance_lifecycle_policy (known after apply)

      [32m+[0m[0m named_port {
          [32m+[0m[0m name = "web"
          [32m+[0m[0m port = 80
        }

      [32m+[0m[0m standby_policy (known after apply)

      [32m+[0m[0m update_policy {
          [32m+[0m[0m max_surge_fixed       = (known after apply)
          [32m+[0m[0m max_surge_percent     = 100
          [32m+[0m[0m max_unavailable_fixed = 0
          [32m+[0m[0m min_ready_sec         = 0
          [32m+[0m[0m minimal_action        = "REPLACE"
          [32m+[0m[0m type                  = "PROACTIVE"
        }

      [32m+[0m[0m version {
          [32m+[0m[0m instance_template = (known after apply)
          [32m+[0m[0m name              = "v1"
        }
    }

[1m  # google_compute_instance_template.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_instance_template" "this" {
      [32m+[0m[0m can_ip_forward          = false
      [32m+[0m[0m description             = "nginx-app server template"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m instance_description    = "This template is used to create nginx-app server instances"
      [32m+[0m[0m labels                  = {
          [32m+[0m[0m "service" = "nginx"
          [32m+[0m[0m "version" = "v1"
        }
      [32m+[0m[0m machine_type            = "e2-medium"
      [32m+[0m[0m metadata                = {
          [32m+[0m[0m "block-project-ssh-keys" = "true"
          [32m+[0m[0m "version"                = "v1"
        }
      [32m+[0m[0m metadata_fingerprint    = (known after apply)
      [32m+[0m[0m metadata_startup_script = <<-EOT
            #!/bin/bash
            
            cat <<EOF > /var/www/html/index.nginx-debian.html
            <html>
            <body>
            <h1>Hello from $(curl  -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/name")</h1>
            </body>
            </html>
        EOT
      [32m+[0m[0m name                    = "nginx-v1"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m project                 = (known after apply)
      [32m+[0m[0m region                  = (known after apply)
      [32m+[0m[0m self_link               = (known after apply)
      [32m+[0m[0m tags                    = [
          [32m+[0m[0m "nginx-app",
        ]
      [32m+[0m[0m tags_fingerprint        = (known after apply)

      [32m+[0m[0m confidential_instance_config (known after apply)

      [32m+[0m[0m disk {
          [32m+[0m[0m auto_delete  = true
          [32m+[0m[0m boot         = true
          [32m+[0m[0m device_name  = (known after apply)
          [32m+[0m[0m disk_size_gb = (known after apply)
          [32m+[0m[0m disk_type    = "pd-balanced"
          [32m+[0m[0m interface    = (known after apply)
          [32m+[0m[0m mode         = (known after apply)
          [32m+[0m[0m source_image = "nginx-app-vm-image"
          [32m+[0m[0m type         = (known after apply)
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m ipv6_access_type   = (known after apply)
          [32m+[0m[0m name               = (known after apply)
          [32m+[0m[0m network            = "default"
          [32m+[0m[0m stack_type         = (known after apply)
          [32m+[0m[0m subnetwork         = "default"
          [32m+[0m[0m subnetwork_project = (known after apply)
        }

      [32m+[0m[0m scheduling {
          [32m+[0m[0m automatic_restart   = true
          [32m+[0m[0m on_host_maintenance = "MIGRATE"
          [32m+[0m[0m preemptible         = false
          [32m+[0m[0m provisioning_model  = (known after apply)
        }

      [32m+[0m[0m service_account {
          [32m+[0m[0m email  = (known after apply)
          [32m+[0m[0m scopes = [
              [32m+[0m[0m "https://www.googleapis.com/auth/cloud-platform",
            ]
        }
    }

[1m  # google_compute_ssl_certificate.this[0m will be created
[0m  [32m+[0m[0m resource "google_compute_ssl_certificate" "this" {
      [32m+[0m[0m certificate_id     = (known after apply)
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m expire_time        = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = (known after apply)
      [32m+[0m[0m name_prefix        = "nginx-ssl-"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
        [90m# (2 unchanged attributes hidden)[0m[0m
    }

[1m  # google_compute_target_http_proxy.http[0m will be created
[0m  [32m+[0m[0m resource "google_compute_target_http_proxy" "http" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "nginx-http"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m proxy_bind         = (known after apply)
      [32m+[0m[0m proxy_id           = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m url_map            = (known after apply)
    }

[1m  # google_compute_target_https_proxy.https[0m will be created
[0m  [32m+[0m[0m resource "google_compute_target_https_proxy" "https" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "nginx-https"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m proxy_bind         = (known after apply)
      [32m+[0m[0m proxy_id           = (known after apply)
      [32m+[0m[0m quic_override      = "NONE"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m ssl_certificates   = (known after apply)
      [32m+[0m[0m url_map            = (known after apply)
    }

[1m  # google_compute_url_map.http[0m will be created
[0m  [32m+[0m[0m resource "google_compute_url_map" "http" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m fingerprint        = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m map_id             = (known after apply)
      [32m+[0m[0m name               = "nginx-http"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)

      [32m+[0m[0m default_url_redirect {
          [32m+[0m[0m https_redirect         = true
          [32m+[0m[0m redirect_response_code = "MOVED_PERMANENTLY_DEFAULT"
          [32m+[0m[0m strip_query            = false
        }
    }

[1m  # google_compute_url_map.https[0m will be created
[0m  [32m+[0m[0m resource "google_compute_url_map" "https" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m default_service    = (known after apply)
      [32m+[0m[0m fingerprint        = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m map_id             = (known after apply)
      [32m+[0m[0m name               = "nginx-https"
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
    }

[1mPlan:[0m 15 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m Loadbalancer-IPv4-Address = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
